Given a binary tree, remove all leaf nodes from it. Leaf nodes are those nodes, which don't have any children.

Note:

1. Root will also be a leaf node if it doesn't have left and right child. 
2. You don't need to print the tree, just remove all leaf nodes and return the updated root.
Detailed explanation ( Input/output format, Notes, Images )
Constraints
Time Limit: 1 second
Sample Input 1:
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
Sample Output 1:
8
3 10
6 14 

//code.........................

#include<queue>
BinaryTreeNode<int>* removeLeafNodes(BinaryTreeNode<int> *root) {
    // Write your code here
	BinaryTreeNode<int>* ans;
	if(root==NULL ||(root->left==NULL && root->right==NULL))
	{
		return ans;
	}
    queue<BinaryTreeNode<int>* >pending;
	pending.push(root);
	while(!pending.empty()){
		BinaryTreeNode<int>* front=pending.front();
		pending.pop();
		cout<<front->data<<" ";
		if(front->left->left!=NULL && front->left->right!=NULL){
			cout<<front->left->data<<" ";
			pending.push(front->left);
		}
		if(front->right->right!=NULL && front->right->left!=NULL){
			cout<<front->left->data<<" ";
			pending.push(front->right);
		}
        cout<<endl;
	}
	
}