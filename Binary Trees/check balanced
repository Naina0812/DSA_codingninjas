Given a binary tree, check if it is balanced. Return true if given binary tree is balanced, false otherwise.

Balanced Binary Tree:
A empty binary tree or binary tree with zero nodes is always balanced. For a non empty binary tree to be balanced, following conditions must be met:
1. The left and right subtrees must be balanced.
2. |hL - hR| <= 1, where hL is the height or depth of left subtree and hR is the height or depth of right subtree.    
Detailed explanation ( Input/output format, Notes, Images )
Constraints
Time Limit: 1 second
Sample Input 1 :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1 :
false
Sample Input 2 :
1 2 3 -1 -1 -1 -1
Sample Output 2 :
true

//code..........................

//Approch 1----------------------------------------
// int height(BinaryTreeNode<int> *root){
// 	if(root==NULL){
// 		return 0;
// 	}
// 	return 1+max(height(root->left),height(root->right));
// }


// Approach 2---------------------------------
pair<bool,int> isBalancedFast(BinaryTreeNode<int> *root){
	if(root==NULL){
		pair<bool,int>p=make_pair(true,0);
		return p;
	}
	pair<bool,int>left= isBalancedFast(root->left);
	pair<bool,int>right= isBalancedFast(root->right);
	bool diff= abs(left.second-right.second)<=1;
	pair<bool,int>ans;
	ans.second=max(left.second,right.second)+1;
	if(left.first && right.first && diff){
		ans.first=true;
	}else{
		ans.first=false;
	}
	return ans;

}
bool isBalanced(BinaryTreeNode<int> *root) {
	// Write your code here
	//Approach 1--------------------------------------
	// if(root==NULL){
	// 	return true;
	// }
	// bool left= isBalanced(root->left);
	// bool right = isBalanced(root->right);
	// bool diff=abs((height(root->left))-(height(root->right)))<=1;
	// if(left && right && diff){
	// 	return true;
	// }
	// return false;


	//  Approach 2-----------------------------
	return isBalancedFast(root).first;
}