For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.

Note:
Assume that the Binary Tree contains only unique elements. 
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= N <= 10^3
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
1 2 4 5 3 6 7 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 
Sample Input 2:
6
5 6 2 3 9 10 
2 6 3 9 5 10 
Sample Output 2:
5 
6 10 
2 3 
9 

//code.......................................

BinaryTreeNode<int>* buildTree(int *preorder, int preLength, int *inorder, int inLength) {
    
    int rootData = preorder[0]; 
    BinaryTreeNode<int> *root = new BinaryTreeNode<int> (rootData);
    
    if(preLength == 1) {     
        return root;
    } else if(preLength == 0) { 
        return NULL;
      }
    
    int rootIndex = 0;
    
    while(inorder[rootIndex] != rootData){
        rootIndex++;
    }
    
    int leftLength = rootIndex;
    int rightLength = inLength - rootIndex  - 1;
    
    BinaryTreeNode<int> *left = buildTree(preorder + 1, leftLength, inorder, leftLength);
    BinaryTreeNode<int> *right = buildTree(preorder + 1 + leftLength, rightLength, inorder + 1 + leftLength, rightLength);
    
    root -> left = left;
    root -> right = right;
    
    return root;
}