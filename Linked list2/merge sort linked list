 Given a singly linked list of integers, sort it using 'Merge Sort.'

Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
1
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Input 2 :
2
-1
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 

//code...................


/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

Node *getMid(Node *head){
	Node *slow=head;
	Node *fast=head;
	while(fast->next!=NULL && fast->next->next!=NULL){
		slow=slow->next;
		fast=fast->next->next;
	}
	return slow;
}

Node *merge(Node *left, Node *right){
     if(left==NULL){
		 return right;
	 }
	 if(right==NULL){
		 return left;
	 }

	 Node *ans=new Node(-1);
	 Node *temp=ans;
	 while(left!=NULL && right!=NULL){
		 if(left->data< right->data){
			 temp->next=left;
			 temp=left;
			 left=left->next;
		 }else{
			 temp->next=right;
			 temp=right;
			 right=right->next;

		 }
	 }

	 while(left!=NULL){
		    temp->next=left;
			 temp=left;
			 left=left->next;
	 }
	 while(right!=NULL){
		    temp->next=right;
			 temp=right;
			 right=right->next;
	 }
	 ans=ans->next;
	 return ans;

}

Node *mergeSort(Node *head)
{
	//Write your code here
	if(head==NULL || head->next==NULL){
		return head;
	}

	// break linked list into two halfs
	Node *mid=getMid(head);
	Node *left=head;
	Node *right=mid->next;
	mid->next=NULL;

	//recursive call to sort both two halfs
	left=mergeSort(left);
	right=mergeSort(right);

	//merge both left and right halfs
    Node *result=merge(left, right);
	return result;

}