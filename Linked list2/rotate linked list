You are given a linked list having ‘n’ nodes and an integer ‘k’.



You have to rotate the linked list to the right by ‘k’ positions .



Example :
Input: linked list = [1 2 3 4] , k = 2

Output: 3 4 1 2

Explanation:
We have to rotate the given linked list to the right 2 times. After rotating it to the right once it becomes 4->1->2->3. After rotating it to the right again, it becomes 3->4->1->2. 


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
6
1 2 3 4 5 6
2


Sample Output 1 :
5 6 1 2 3 4


Explanation For Sample Input 1 :
For the first test case, after 1st clockwise rotation the modified linked list will be : 6->1->2->3->4->5
After, 2nd clockwise rotated the modified linked list will be : 5->6->1->2->3->4.
Thus the output is: 5 6 1 2 3 4.


Sample Input 2 :
3
3 6 9 
0


Sample Output 2:
3 6 9


Explanation For Sample Input 2 :
In this test case, ‘k’ is 0 therefore there will be no rotation, so the linked list remains unchanged.


Expected Time Complexity:
Try to do this in O(n).


Constraints :
1 <= n <= 10^5
0 <= Node.data <= 10^9 
0 <= k <= 10^5

Time Limit: 1 sec

//code..........................

/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

// Node *rotate(Node *head, int k) {
//      // Write your code here.
// }
// Node *rotate(Node *head, int k){
// 	//corner case
//     if (head == NULL || k == 0) {
//         return head;
//     }
    
// 	Node *curr = head;
//     Node *next = NULL;
//     Node *prev = NULL;
    
//     int count = 0;
    
//     while(curr and count < k) {
//         next = curr -> next;
//         curr -> next = prev;
//         prev = curr;
//         curr = next;
//         count++;
//     }
//     // after the loop prev will be pointing at the first node of revesed group
// 	// and head will be at the last
    
//     if(next) {
//         head -> next = rotate(next, k);
//     }
    
//     return prev;
// }
Node *rotate(Node *head, int k) {
     // Write your code here.
     int n=0;
     Node* start=head;
     Node* pre=NULL;
     while(start!=NULL){
          pre=start;
          start=start->next;
          n++;
     }
     pre->next=head;
     int x=n-(k%n);
     // cout<<n<<endl;
     Node* temp=NULL;
     while(x!=0){
          temp=head;
          head=head->next;
          x--;
     }
     temp->next=NULL;
     return head;
}