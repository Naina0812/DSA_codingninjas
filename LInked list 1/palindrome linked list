You have been given a head to a singly linked list of integers. Write a function check to whether the list given is a 'Palindrome' or not.

Detailed explanation ( Input/output format, Notes, Images )
 Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Time Limit: 1sec

Where 'M' is the size of the singly linked list.
Sample Input 1 :
1
9 2 3 3 2 9 -1
Sample Output 1 :
true
Sample Input 2 :
2
0 2 3 2 5 -1
-1
Sample Output 2 :
false
true
Explanation for the Sample Input 2 :
For the first query, it is pretty intuitive that the the given list is not a palindrome, hence the output is 'false'.

For the second query, the list is empty. An empty list is always a palindrome , hence the output is 'true'.

//code......................

#include <bits/stdc++.h>
//method 2 functions
Node* getMid(Node* head){
    Node* slow=head;
    Node* fast=head;
    while(fast!=NULL &&fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

Node* reverse(Node* head){
    Node* curr=head;
    Node* prev=NULL;
    Node* next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}

//............................................................................
bool isPalindrome(Node *head) {
  // Write your code here



  // method 1--------time -O(n),space-O(n)
//   Node *temp=head;
//   vector<int>ans ;
//   int count =0;
//   while(temp!=NULL){
//       ans.push_back(temp->data);
//       count++;
//       temp=temp->next;
//   }
//    temp=head;
//    int flag=1;
//    while(temp!=NULL && count>=0){
//        if(temp->data==ans[count-1])
//        {
//            flag=1;
//            temp=temp->next;
//            count--;
//        }else{
//            return 0;
//        }
//    }
//    return 1;
//........................................................................................................................
// method 2:...........time-O(n),space-(1)

if(head==NULL){
    return true;
}
 Node* middle= getMid(head);
 Node* temp=middle->next;
 middle->next=reverse(temp);
 Node* head1=head;
 Node* head2=middle->next;
 while(head2!=NULL){
     if(head2->data!=head1->data){
         return false;
     }
     head2=head2->next;
     head1=head1->next;
 }
  temp=middle->next;
 middle->next=reverse(temp);
 return true;
   
}